#pragma once
#include <string>

static std::string shader_source_simple =
"float3              iMouse;\n"
"float4              iResolution;\n"
"float               iTime;\n"
"float               iFrame;\n"
"\n"
"float4 main(): SV_TARGET\n"
"{\n"
"    float4 outColor = (float4)0;\n"
"    float2 fragCoord = float2(iMouse.x, iResolution.y - iMouse.y) + "
"float2(0.5, 0.5);\n"
"    outColor = float4(fragCoord, iTime, iFrame) * iMouse.xyzz;       \n"
"    return outColor;\n"
"}";

static std::string shader_source =
"struct RGB {\n"
"  float r;\n"
"  float g;\n"
"  float b;\n"
"};\n"
"\n"
"struct UBO {\n"
"  float4x4  XformMatrix;\n"
"  float3    Scale;\n"
"  RGB       Rgb;\n"
"  float     t;\n"
"  float2    uv; \n"
"};\n"
"\n"
"struct Data {\n"
"  float3  Element_f3;\n"
"  float2  Element_f2;\n"
"};\n"
"\n"
"struct PSInput {\n"
"  float4  Position  : SV_POSITION;\n"
"  float3  Normal    : NORMAL;\n"
"  float3  Color     : COLOR;\n"
"  float   Alpha     : OPACITY;\n"
"  float4  Scaling   : SCALE;\n"
"  float2  TexCoord0 : TEXCOORD0;\n"
"  float2  TexCoord1 : TEXCOORD1;\n"
"  float2  TexCoord2 : TEXCOORD2;\n"
"};\n"
"\n"
"struct PSOutput {\n"
"  float4  oColor0 : SV_TARGET0;\n"
"  float4  oColor1 : SV_TARGET1;\n"
"  float4  oColor2 : SV_TARGET2;\n"
"  float4  oColor3 : SV_TARGET3;\n"
"  float4  oColor4 : SV_TARGET4;\n"
"  float4  oColor5 : SV_TARGET5;\n"
"  float4  oColor6 : SV_TARGET6;\n"
"  float4  oColor7 : SV_TARGET7;\n"
"};\n"
"\n"
"struct myStruct\n"
"{\n"
"    float3 f3;\n"
"\tfloat2 f2;\n"
"};\n"
"\n"
"Texture2D     texture_2d : register(t0, space0); // D3D_SIT_TEXTURE2D\n"
"SamplerState  sampler_ : register(s1, space1); // D3D_SIT_SAMPLER\n"
"ConstantBuffer<UBO> constant_buffer_array[2] : register(b2, space2); // D3D_SIT_CBUFFER\n"
"ConsumeStructuredBuffer<Data> consume_structured_buffer : register(u3, space2); // D3D_SIT_UAV_CONSUME_STRUCTURED\n"
"AppendStructuredBuffer<Data> append_structured_buffer : register(u4, space2); // D3D_SIT_UAV_APPEND_STRUCTURED\n"
"TextureBuffer<myStruct> texture_buffer; // D3D_SIT_TBUFFER\n"
"RWTexture2D<float2>     rw_texture[2]; // D3D_SIT_UAV_RWTYPED\n"
"StructuredBuffer<myStruct> sturctured_buffer; // D3D_SIT_STRUCTURED\n"
"RWStructuredBuffer<myStruct> rw_sturctured_buffer; // D3D_SIT_UAV_RWSTRUCTURED\n"
"ByteAddressBuffer ba_buffer; // D3D_SIT_BYTEADDRESS\n"
"RWByteAddressBuffer rw_ba_buffer; // D3D_SIT_RWBYTEADDRESS\n"
"RWTexture2DArray<float2>     rw_texture_array; // D3D_SIT_UAV_RWTYPED\n"
"Texture2DMS<float4, 128> ms_texture;\n"
"Texture2DMSArray<float4, 64> ms_texture_array;\n"
"Buffer<uint> buffer_int;\n"
"Buffer<uint2> buffer_int2;\n"
"Buffer<uint3> buffer_int3;\n"
"Buffer<uint4> buffer_int4;\n"
"Buffer<float> buffer_float;\n"
"Buffer<float2> buffer_float2;\n"
"Buffer<float3> buffer_float3;\n"
"Buffer<float4> buffer_float4;\n"
"cbuffer c_buffer : register(b11, space2) { int2 cbuffer_i2; float3 cbuffer_f3; }\n"
"tbuffer t_buffer : register(t15)\n"
"{\n"
"\tfloat3 tbuffer_f3;\n"
"\tuint tbuffer_u1;\n"
"\tint2 tbuffer_i2;\n"
"};\n"
"\n"
"PSOutput main(PSInput input)\n"
"{\n"
"  Data val = consume_structured_buffer.Consume();\n"
"  append_structured_buffer.Append(val);\n"
"  \n"
"  int buffer_value = buffer_int[0] * buffer_int2[0].x * buffer_int3[0].x * buffer_int4[0].x;\n"
"  buffer_value *= (int)(buffer_float[0] * buffer_float2[0].x * buffer_float3[0].x * buffer_float4[0].x);\n"
"  rw_texture[0][uint2(0,0)] = buffer_value;\n"
"  rw_sturctured_buffer[0].f3.x = 1;\n"
"  rw_ba_buffer.Store(1, 1);\n"
"  int w,h,n;\n"
"  ms_texture.GetDimensions(w,h,n); \n"
"  int w1,h1,e1,n1;\n"
"  ms_texture_array.GetDimensions(w1,h1,e1,n1); \n"
"  n1 *= texture_buffer.f3.x;\n"
"\n"
"  PSOutput ret;\n"
"  ret.oColor0 = mul(constant_buffer_array[0].XformMatrix, input.Position) * n * n1 * cbuffer_i2.x * tbuffer_f3.x;\n"
"  ret.oColor1 = float4(input.Normal, 1) + float4(constant_buffer_array[0].Scale, 0);\n"
"  ret.oColor2 = float4(input.Color, 1);\n"
"  ret.oColor3 = float4(texture_2d.Sample(sampler_, input.TexCoord0).xyz, input.Alpha);\n"
"  ret.oColor4 = input.Scaling * sturctured_buffer[0].f3.x * ba_buffer.Load(0);\n"
"  ret.oColor5 = float4(input.TexCoord0, 0, 0);\n"
"  ret.oColor6 = float4(input.TexCoord1, 0, 0);\n"
"  ret.oColor7 = float4(input.TexCoord2, 0, 0);\n"
"  return ret;\n"
"}";