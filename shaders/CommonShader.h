#pragma once
#include <string>

static std::string shader_source_simple =
    "float3              iMouse;\n"
    "float4              iResolution;\n"
    "float               iTime;\n"
    "float               iFrame;\n"
    "\n"
    "float4 main(): SV_TARGET\n"
    "{\n"
    "    float4 outColor = (float4)0;\n"
    "    float2 fragCoord = float2(iMouse.x, iResolution.y - iMouse.y) + "
    "float2(0.5, 0.5);\n"
    "    outColor = float4(fragCoord, iTime, iFrame) * iMouse.xyzz;       \n"
    "    return outColor;\n"
    "}";

static std::string shader_source =
"struct myStruct {\n"
"  float value;\n"
"};\n"
"\n"
    "Texture2D     MyTexture : register(t0, space0);\n"
	"TextureBuffer<myStruct> texture_buffer;\n"
    "RWTexture2D<half>     rw_texture; \n"
    "StructuredBuffer<myStruct> sturctured_buffer; \n"
    "RWStructuredBuffer<myStruct> rw_sturctured_buffer; \n"
    "ByteAddressBuffer ba_buffer; \n"
    "RWByteAddressBuffer rw_ba_buffer; \n"
    "SamplerState  MySampler : register(s1, space1);\n"
    "\n"
    "struct RGB {\n"
    "  float r;\n"
    "  float g;\n"
    "  float b;\n"
    "};\n"
    "\n"
    "struct UBO {\n"
    "  float4x4  XformMatrix;\n"
    "  float3    Scale;\n"
    "  RGB       Rgb;\n"
    "  float     t;\n"
    "  float2    uv; \n"
    "};\n"
    "\n"
    "ConstantBuffer<UBO> MyConstants[2] : register(b2, space2);\n"
    "\n"
    "struct Data {\n"
    "  float4  Element;\n"
    "};\n"
    "\n"
    "ConsumeStructuredBuffer<Data> MyBufferIn : register(u3, space2);\n"
    "AppendStructuredBuffer<Data> MyBufferOut : register(u4, space2);\n"
    "\n"
    "struct PSInput {\n"
    "  float4  Position  : SV_POSITION;\n"
    "  float3  Normal    : NORMAL;\n"
    "  float3  Color     : COLOR;\n"
    "  float   Alpha     : OPACITY;\n"
    "  float4  Scaling   : SCALE;\n"
    "  float2  TexCoord0 : TEXCOORD0;\n"
    "  float2  TexCoord1 : TEXCOORD1;\n"
    "  float2  TexCoord2 : TEXCOORD2;\n"
    "};\n"
    "\n"
    "struct PSOutput {\n"
    "  float4  oColor0 : SV_TARGET0;\n"
    "  float4  oColor1 : SV_TARGET1;\n"
    "  float4  oColor2 : SV_TARGET2;\n"
    "  float4  oColor3 : SV_TARGET3;\n"
    "  float4  oColor4 : SV_TARGET4;\n"
    "  float4  oColor5 : SV_TARGET5;\n"
    "  float4  oColor6 : SV_TARGET6;\n"
    "  float4  oColor7 : SV_TARGET7;\n"
    "};\n"
    "\n"
    "PSOutput main(PSInput input)\n"
    "{\n"
    "  Data val = MyBufferIn.Consume();\n"
    "  MyBufferOut.Append(val);\n"
    "\n"
    "  PSOutput ret;\n"
    "  ret.oColor0 = mul(MyConstants[0].XformMatrix, input.Position);\n"
    "  ret.oColor1 = float4(input.Normal, 1) + float4(MyConstants[0].Scale, "
    "0);\n"
	"  ret.oColor2 = float4(input.Color, 1);\n"
	"  rw_texture[uint2(0,0)] = 1.f;\n"
    "  rw_sturctured_buffer[0].value = 1;\n"
    "  rw_ba_buffer.Store(1, 1);\n"
    "  ret.oColor3 = float4(MyTexture.Sample(MySampler, input.TexCoord0).xyz, "
    "input.Alpha)* texture_buffer.value * sturctured_buffer[0].value * ba_buffer.Load(0);\n"
    "  ret.oColor4 = input.Scaling;\n"
    "  ret.oColor5 = float4(input.TexCoord0, 0, 0);\n"
    "  ret.oColor6 = float4(input.TexCoord1, 0, 0);\n"
    "  ret.oColor7 = float4(input.TexCoord2, 0, 0);\n"
    "  return ret;\n"
    "}";